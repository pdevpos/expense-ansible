 [localhost]
 localhost

 [web]
 172.31.17.151

 [all:children]
 web
 localhost
* to communicate with remote nodes we use this command:
ansible -i 172.31.17.151, all -e ansible_user=ec2-user -e ansible_password=DevOps321 -m ping
 * ansible  -i inventory.ini localhost  --list-hosts

 Install nginx and execute this nginx in ansible-playbook:
 =========================================================
 -	name: install and run nginx
 hosts: web
 become: yes # getting root access
 tasks:
 -	name: Install nginx
 ansible.builtin.dnf:
      name: nginx
      state: installed



 what is adhoc command?
     It is ansible command line to run modules against nodes,instead of playbooks. Some urgency purposes.
 •	Variables
 •	Datatypes
 •	Functions
 •	Loops
 •	Conditions
 Playbook: it is a yaml file which contains a list of modules or collections.
 Playbook contains multiple plays.
 -	Name: PLAY-1
 Hosts: localhost
 Tasks:
 -	Name: PLAY-1 and TASK-1
 Ansible.builtin.debug:
    msg: “Hello I am from PLAY-1 and TASK-1

 -	Name: PLAY-2
 Hosts: localhost
 Tasks:
 -	Name: PLAY-2 and TASK-1
 Ansible.builtin.debug:
    msg: “Hello I am from PLAY-1 and TASK-1

 variables:
 -	Name: variables
 Hosts: localhost
 Vars: #variable declaration
     Course: “Ansible”
     Trainer: “Sivakumar”
      Duration: “120hrs”
 Tasks:
 -	Name:  print information
 Ansible.builtin.debug:
     Msg: “Hi, we are learning {{course}} from Trainer {{Trainer}} ,Duration is {{Duration}}.”
 The above variable declaration is playlevel

 -	Variables as args
 -	Variables from user prompt

 Task Level:
 Inheritance and overriding:
 -	Name: variables
 Hosts: localhost
 Vars: #variable declaration
     Course: “Terraform”
     Trainer: “Siva”
      Duration:”15hrs”
 Tasks:
 -	Name: print information
 Vars: # Task level variables
    Course: “DevOps”
 ansible.builtin.debug:
      Msg: “Hi, we are learning {{course}} from trainer {{Trainer}} and Duration is {{Duration}}

 -	Name: print information
 ansible.builtin.debug:
      Msg: “Hi, we are learning {{course}} from trainer {{Trainer}} and Duration is {{Duration}}


 In the above code, in tasks level course must be override as DevOps instead of Terraform
 In second tasks, second tasks level will not override it displays as play level variables.
  If there are multiple variables at play level, (more than 30 variables) then we should not able to write those many variables in play level,we can maintain one file
 Vars.yml
 Course: “DevOps with AWS”
 Trainer:”Siva Kumar Reddy M”
 Duration:”3.5 months”

 06-vars-files.yml:
 -	Name: variables from files
 Hosts: localhost
 Vars_files:
 -  Vars.yml
 Tasks:
 -	Name: print override information
 Ansible.builtin.debug:
      Msg:  “Hi , We are learning Course {{Course}} from trainer {{Trainer}} and Duration {{Duration}}.”



 07-vars-prompt.yaml:
 -	name: variables from files
 hosts: localhost
 vars_prompt:
 -	name: USERNAME
 prompt: please enter your username
 private: false
 -	name: PASSWORD
 prompt: please enter your password
 private: true

 tasks:
 -	name: print override information
 Ansible.builtin.debug:
      msg:  “Hi, username: {{USERNAME}} , Password:{{PASSWORD}}.”


 08-vars-inventory.yaml:
 Inventory.ini

 [localhost]
 Localhost

 [localhost:vars]
 Course=”DevOps with AWS”
 Trainer=”Sivakumar”
 Duration=”120hrs”

 08-vars-inventory.yaml:
 -	name: variables from inventory
 hosts: localhost
 tasks:
 -	name: print information
 ansible.builtin.debug:
     msg: “Hi we are learning {{course}} from Trainer {{Trainer}} , Duration is {{Duration}} and Timings is {{Timings}}
 to run command:
 ansible-playbook -i  inventory.ini -e ansible_user=ec2-user -e ansible_password=DevOps321 08-vars-
 inventory.yaml

 in the above code timings was not declared in an inventory.ini so we will get an erro like “Timings variables is undefined”

 -	name: variables from files
 hosts: localhost
 tasks:
 vars:
     Timings: “2:50AM”
 -	name: print information
 ansible.builtin.debug:
     msg: “Hi we are learning {{Course}} from Trainer {{Trainer }}, Duration is {{ Duration }} and Timings are: {{Timings}}



 10-vars-extra-arguments:
 -	name: variables from arguments
 hosts: localhost
 tasks:
 -	name: get from args
 ansible.builtin.debug:
     msg: “Hello {{PERSON}} , Good {{WiSHES}}”

 run command:
 ansible-playbook -I inventory.ini -e ansible_user=ec2-user -e ansible_password=DevOps321 -e PERSON=siva WISHES=Good Morning


 11-vars-preferences:
 -	name: variable preference
 hosts: localhost
 vars:
     WISHES: “Morning from PLAY variable
 Vars_files:
 -	  vars.yaml
  vars_prompt:
 -	 name: WISHES
  prompt: Please enter Wishes
  private: false
                               tasks:
 -	Name: check preference
       Vars:
            WISHES: “Morning from TASK variable”
 Ansible.builtin.debug:
      Msg: “Hello , Good {{WISHES}}”


 Order priority:
 1.arguments
 2.Task level
 3.variable files
 4.prompt
 5.play level
 6.inventory



 DataTypes:
 Int,float,doube,Boolean,array list,map
 In scripting:
 -	name: data types
 hosts: localhost
 vars:
     Course: DevOps with AWS #String
                                      Tools: # list
 -	Linux
 -	Shell
 -	Ansible
 Experience: #map or dictionary
     DevOps: 3 #number
     AWS: 2
     Docker: 1
 RealProject: true #boolean



DataTypes:
==========
- name: datatypes
  hosts: localhost
  vars:
    Course: Devops with AWS #string
    Tools: #list
    - Linux
    - Shell
    - Ansible
    Experience: # map or dictionary
      Devops: 3 #number
      AWS: 2
      Docker: 1
    RealProject: true #boolean
  tasks:
  - name: print variables
    ansible.builtin.debug:
       msg: "Course: {{Course}}, Tools covered: {{Tools}},Experience is {{Experience}} , is real project : {{Real Project}}"


Conditions:
===========
Ansible does not guarantee modules/collections for everything in linux.
- name: check user exists or not
  hosts: localhost
  become: yes
  tasks:
    - name: user exists or not
      ansible.builtin.command: id expense
    - name: display message
      ansible.builtin.debug:
        msg: "Hello devops"

 In the above code "id expense " is to check a user expense or not.
 if user doesn't exists , will get an error.
 to ignore error, use "ignore_errors"
 - name: check user exists or not
   hosts: localhost
   become: yes
   tasks:
     - name: user exists or not
       ansible.builtin.command: id expense
       ignore_errors: true
     - name: display message
       ansible.builtin.debug:
         msg: "Hello devops"


 How can you run a command and take the output into a variable?
 ===============================================================
 - name: check user exists or not
    hosts: localhost
    become: yes
    tasks:
      - name: user exists or not
        ansible.builtin.command: id expense
        register: USER
        ignore_errors: true

     - name: dipslay USER output
       ansible.builtin.debug:
         msg: "user info:{{USER}}"

     - name: create user
       ansible.builtin.command: useradd expense
       when: USER.rc!=0 #condition


      - name: display message
        ansible.builtin.debug:
          msg: "Hello devops"

in the above register key USER contains the json data as follows:
ok: [localhost] => {
    "msg": {
        "changed": true,
        "cmd": [
            "id",
            "expense"
        ],
        "delta": "0:00:00.007526",
        "end": "2024-08-08 16:17:41.459744",
        "failed": true,
        "msg": "non-zero return code",
        "rc": 1,
        "start": "2024-08-08 16:17:41.452218",
        "stderr": "id: ‘expense’: no such user",
        "stderr_lines": [
            "id: ‘expense’: no such user"
        ],
        "stdout": "",
        "stdout_lines": []
    }
}
based on this json we have to check whether user exists or not.
Ansible 26 video Quiz


Ansible27:
=========
functions/filters
ansible we cant create functions. we can use existing filters....
filter = data transformation/manipulation
to change string lower to upper or viceversa
devops ----> DevOps
aws ----> AWS

* if a number less than 10, print less than 10
otherwise print greater than equal to 10

- name: check number
  hosts: localhost
  vars_prompt:
  - name: number
    prompt: please enter number
    private: no
  tasks:
   -  name: number is less than 10
      debug:
        msg: "Given number {{number}} is less than 10"
     when: number < 10

   - name: number is greater than or equal to 10
     debug:
       msg: "Given number {{number}} is greater than 10"
    when: number >= 10

    in the  above code var_prompt data type is a text/string.
    so entering any number is a string/text, so we need to convert
    in ansible we use "filters".
    Ansible is a strict, it can't automatically convert text into a number.
    10 ---> text
    ansible filters are useful.ansible developed in python.....
    filter is denote with pipe symbol '|'
    ansible filters
    - name: check number
      hosts: localhost
      vars_prompt:
      - name: number
        prompt: please enter number
        private: no
      tasks:
       -  name: number is less than 10
          debug:
            msg: "Given number {{number}} is less than 10"
         when: number | int < 10

       -  name: number is less than 10
          debug:
             msg: "Given number {{number}} is less than 10"
             when: number | int > 10

if we give text instead of number , ansible treat as 0

02-filters.yaml:
================
- name: default value
  hosts: localhost
  tasks:
  - name: print default value
    ansible.builtin.debug:
      msg: "{{Course}}"

      to run the above code, will get an error like "undefined variable"
      - name: default value
        hosts: localhost
        tasks:
        - name: print default value
          ansible.builtin.debug:
            msg: "{{Course | default('Ansible') }}"

            in the above code to set a default value

      upper case:
      ===========
      - name: upper case
        hosts: localhost
        vars:
          greeting: Hello,Good Morning"
        tasks:
        - name: convert into uppercase
          ansible.builtin.debug:
            msg: "{{ greeting | upper }}"

    lower case:
    ==========
     - name: lower case
        hosts: localhost
        vars:
          greeting: Hello,Good Morning"
        tasks:
        - name: convert into uppercase
          ansible.builtin.debug:
            msg: "{{ greeting | lower }}"


 remove duplicates:
 ====================
  - name: remove duplicates
 hosts: localhost
 vars:
   numbers: [1,2,3,4,4,5,5]
 tasks:
 - name: remove duplicate numbers
   ansible.builtin.debug:
     msg: "{{ numbers | unique }}"


min and max:
===========
 - name: min and max
hosts: localhost
vars:
  ages: [25,35,67,89]
tasks:
- name: get min age
  ansible.builtin.debug:
    msg: "{{ age | min }} , max age: {{ age | max }}"

dictionary to items:
==================
here dictionary = map = key/value pair

 - name: upper case
    hosts: localhost
    vars:
      my_dict: # this is called as dictionary or map or key/value pairs
        Course:
        Trainer:
        Duration:
    tasks:
    - name: convert dictionary to lists
      ansible.builtin.debug:
        msg: "{{ my_dict | dict2items }}"


    in the above code convert map to lists.

    items to dictionary:
    =====================
    - name: convert items to dict
        hosts: localhost
        vars:
          my_list:
          - {key: 'Course','value':'Ansible'}
          - {key: 'Course','value':'Ansible'}
          - {key: 'Course','value':'Ansible'}

        tasks:
        - name: convert dictionary to lists
          ansible.builtin.debug:
            msg: "{{ my_list | items2dict }}"


 loops:
 ======

 - name: loops
   hosts: localhost
   tasks:
     - name: get items
       ansible.builtin.debug:
         msg: "Hello {{ item }}"
       loop:
         - linux
         - ansible
         - shell

   in the above code item is a fixed variable to get loop value one by one.


   to install a package:
   ====================
   - name: install packages
     hosts: localhost
     tasks:
      - name: install multiple packages
        dnf: "{{item}}"
          state: latest

        loop:
         - mysql
         - nginx
         - postfix

   to install some packages and to remove some packages:
   =====================================================(need to observe one more time)

    - name: install packages
        hosts: localhost
        tasks:
         - name: install multiple packages
           dnf: "{{item.name}}"
             state: "{{item.state}}"
             autoremove: yes

           loop:
            - {name: 'mysql',state: 'latest'}
            - {name: 'nginx',state: 'absent'}
            - {name: 'postfix',state: 'absent'}



 expense project:
 ===============
 * create db instance in aws service
 * go to this url: https://learndevopsonline.github.io/learndevopsonline/build/docs/Expense-Project-V2/backend
 * create a repo for expense project
 * create a yml files under expense project repo
 * create route53 record
 * add dns record in inventory.ini
 * inventoty.ini:
 ===============
 [db]
 db.pdevops72.online

 db.yml:
 =======
 - name: configuration setup
   hosts: db
   become: yes
    vars_prompt:
    - name: mysql_root_password
      prompt: Please enter root password
      private: no
   tasks:
     - name: Install mysql-server
       ansible.builtin.dnf:
         name: mysql-server
         state: installed

     - name: start and enable mysql service
       ansible.builtin.service:
         name: mysqld
         state: started
         enabled: yes

     Next, We need to change the default root password in order to start using the database service. Use password ExpenseApp@1 or any other as per your choice.

     first time when we set the password , it will execute
     when we run second time , will get an error like already password set, so for this we have check the mysql connection in mysql hosts
# check password is already setup or not
     - name: check DB connection
        community.mysql.mysql_info:

           login_user: root
           login_password: "{{mysql_root_password}}"
           login_host: db.pdevops72.online
            filter: version
           ignore_errors: true
           register: mysql_connection_output


       - name: receive output
         ansible.builtin.debug:
           msg: "{{ mysql_connection_output }}"


           to check mysql-server installed or not , filter:version
register: mysql_connection_output:
=================================
ok: [db.pdevops72.online] => {
    "msg": {
        "changed": false,
        "failed": true,
        "msg": "unable to connect to database using pymysql 1.1.1, check login_user and login_password are correct or /root/.my.cnf has the credentials. Exception message: (1130, \"Host 'ip-172-31-40-8.ec2.internal' is not allowed to connect to this MySQL server\")"
    }
}

   * Ansible is developed in python.now we are connecting to mysql from ansible which is developed by python.
   * dependencies for python to connect mysql servers.
   * install nodejs dependencies
   * pip: installing python dependencies

   to install python packages related use "pip module"

   - name: install python mysql dependencies
     ansible.builtin.pip:
      name:
       - PyMySql
       - cryptography
     executable: pip3.9


     * now setup connection:
     ======================
     - name: setup root password
       ansible.builtin.command: mysql_secure_installation --set-root-pass {{mysql_root_password}}
       when: mysql_connection_output.failed is true


       * to check mysql installed or not use the following command in mysql remote hosts:
       =================================================================================
       mysql -h db.pdevops72.online -u root -pExpenseApp@1



       backend.yml
       ===========

shell vs command module:
========================
shell module: it will use shell environment , means we can use redirections > ,pipes | and other shell variables.
command module: it will just run the commands ,but can't use shell environment like > ,| and other shell variables.
if a simple plain command without variable, then we can use command module.
if you want to run shell script inside ansible or complex commands with redirections then we can use shell module.

Ex:
===
shell-command.yml
==================
- name: command vs shell
  hosts: localhost
  tasks:
  - name: execute command module
    ansible.builtin.command: "echo ,'Hi, this is from command module' > /tmp/command.txt"

  - name: execute shell module
    ansible.builtin.command: "echo,'Hi this is from shell module' > /tmp/shell.txt"

# simple commands without need of shell variables,environment and features like redirections,pipes and go for command module
# if we need to run complex commands or scripts go for shell module.
# whatever works in command module it will work in shell module but viceversa not possible.


ansible.buitin.user : works for all distributions

useradd / adduser
if we use ansible modules we can automatically get idempotency nature.
dnf module will work only Redhat family.

backend.yaml:
=============
- name: configure backend server
  hosts: localhost
  become: yes
  tasks:
  - name: disable nodejs old version
    ansible.builtin.command: dnf module disable nodejs -y

  - name: enable nodejs new version
    ansible.builtin.command: dnf module enable nodejs:20 -y

    - name: add exepense user
      ansible.builtin.user:
        name: expense

- name: make a directory
  ansible.builtin.file:
    path: /app
    state: directory

- name: Download backend code
  ansible.builtin.get_url:
    url: https://expense-artifacts.s3.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip

 - name: Unarchive backend code
   ansible.builtin.unarchive:
     src: /tmp/foo.zip  # by default checks in ansible server
     dest: /app  # unarchive from ansible server to backend node server
     remote_src: yes

  - name: install dependencies
    ansible.builtin.command: npm install
    args:
        chdir: /app



  * How to run a playbook with a specific tasks?how can achieve that?
  Ansible tags:
  ==============
  * to run a specific tasks ....
  * - name: download code
      ansible.builtin.get_url:
        tag:
         - deployment
        url:
        dest:

  * to run specific tags through cmd line use:
  ansible-playbook db.yml --ask-vault-pass -t deployment.














